plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    if(rootProject.hasProperty('architectury_version')) {
        modApi "${rootProject.ext.architectury_package}:architectury-fabric:${rootProject.architectury_version}"
    }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("fabric")
}

jar {
    archiveClassifier.set("dev")
    manifest {
        mainAttributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "itsmeow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "itsmeow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.fabric_api_version}"
        )
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    manifest {
        mainAttributes(
                "Maven-Artifact": "${rootProject.maven_group}:${rootProject.mod_id}-${project.name}:${rootProject.version}",
                "Specification-Title": rootProject.mod_id,
                "Specification-Vendor": "itsmeow",
                "Specification-Version": "1",
                "Implementation-Title": rootProject.mod_id,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "itsmeow",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${rootProject.mc_version}-${rootProject.fabric_api_version}"
        )
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            pom {
                name = rootProject.name + "-" + project.name
                url = rootProject.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/" + rootProject.github + ".git"
                    developerConnection = "scm:git:git@github.com:" + rootProject.github + ".git"
                    url = "https://github.com/" + rootProject.github
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/" + rootProject.github + "/issues"
                }
                organization {
                    name = 'itsmeow Mods'
                    url = 'https://itsmeow.dev/'
                }
                developers {
                    developer {
                        id = 'itsmeow'
                        name = 'itsmeowdev'
                        email = 'itsmeow@itsmeow.dev'
                    }
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def configurationNames = ["modImplementation", "modApi"]
                    configurationNames.each { configurationName ->
                        configurations[configurationName].allDependencies.each {
                            if (!(it.name in ["imdlib", "architectury-transformer", "common", "basic-math", "modmenu", "cloth-config"]) && !(it.group in ["curse.maven"])) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                        }
                    }
                }
            }
            artifact(remapJar) {
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
        loom.disableDeprecatedPomGeneration(mavenFabric)
    }
}


repositories {
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
}
dependencies {
    modRuntimeOnly("com.terraformersmc:modmenu:7.1.0") {
        transitive = false
    }
}